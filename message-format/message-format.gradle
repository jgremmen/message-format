/*
 * Copyright 2020 Jeroen Gremmen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//file:noinspection DependencyNotationArgument
//file:noinspection GroovyAssignabilityCheck


plugins {
  id 'antlr'
  id 'idea'
}


description = 'Message Format Library'


configurations {
  antlr4 {
    visible = false
  }

  api.setExtendsFrom([])
}


dependencies {
  // main
  annotationProcessor libs.lombok

  implementation libs.bundles.antlr4.runtime
  implementation libs.pack

  // test
  testImplementation gradleTestKit()
  testImplementation libs.spring.core

  antlr4 libs.antlr4
}


def grammarOutputDirectory = layout.buildDirectory
    .dir('generated-src/antlr/main/de/sayayi/lib/message/internal/parser').get().asFile

generateGrammarSource {
  //noinspection GroovyAccessibility
  antlrClasspath = configurations.antlr4
  outputDirectory = grammarOutputDirectory

  arguments += [ '-package', 'de.sayayi.lib.message.internal.parser' ]
}

compileJava.dependsOn generateGrammarSource


sourcesJar {
  dependsOn generateGrammarSource

  exclude 'gen/*'
  exclude '**/*.interp'
}


jar {
  manifest {
    attributes['Implementation-Title'] = project.description
  }
}


javadoc {
  (options as StandardJavadocDocletOptions).with {
    group('Core', [
        'de.sayayi.lib.message',
        'de.sayayi.lib.message.exception',
        'de.sayayi.lib.message.part*'
    ])
    group('Adopters', [
        'de.sayayi.lib.message.adopter',
        'de.sayayi.lib.message.annotation',
    ])
    group('Formatters', [
        'de.sayayi.lib.message.formatter*'
    ])
    group('Util', [
        'de.sayayi.lib.message.util'
    ])

    linksOffline(
        "https://javadoc.io/doc/org.jetbrains/annotations/${resolveVersion('annotations')}/",
        "${rootDir}/gradle/javadocs/jetbrains-annotations")
    linksOffline(
        "https://javadoc.io/doc/org.antlr/antlr4-runtime/${resolveVersion('antlr4-runtime')}/",
        "${rootDir}/gradle/javadocs/antlr4-runtime")
    linksOffline(
        "https://javadoc.io/doc/de.sayayi.lib/antlr4-runtime-ext/${resolveVersion('antlr4-runtime-ext')}/",
        "${rootDir}/gradle/javadocs/antlr4-runtime-ext")
  }
}


publishing {
  publications {

    core(MavenPublication) {
      from components.java

      pom {
        inceptionYear = '2019'

        developers {
          developer {
            id = 'jgremmen'
            name = 'Jeroen Gremmen'
            email = 'jeroen.gremmen@sayayi.de'
          }
        }
      }
    }
  }
}


signing {
  sign publishing.publications.core
}


publishOnCentral {
  projectDescription = 'Highly configurable message format library supporting message definition through annotations'
}


ext.releaseTask.configure {
  if (snapshot) {
    dependsOn 'publishCorePublicationToMavenCentralSnapshotRepository'
  }
}


clean {
  delete layout.projectDirectory.dir('src/main/antlr/gen')
  delete layout.projectDirectory.dir('src/main/gen')

  delete fileTree(layout.projectDirectory.dir('src')).matching {
    include 'main/antlr/*.tokens'
    include 'test/resources/*-SNAPSHOT.mfp'
  }
}


idea {
  module {
    resourceDirs += file('src/main/antlr')
  }
}


tasks.register('generate-compatibility-export', JavaExec) {
  group = 'verification'
  description = 'Export pre-defined set of messages for compatibility test.'

  mainClass = 'de.sayayi.lib.message.internal.pack.PackCompatibilityTest'
  classpath = sourceSets.test.runtimeClasspath

  args "${projectDir}/src/test/resources/messages-${version}.mfp"
}
