/*
 * Copyright 2020 Jeroen Gremmen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//file:noinspection DependencyNotationArgument

plugins {
  id 'antlr'
  id 'idea'
  //id 'de.sayayi.plugin.gradle.libapi' version '1.0-SNAPSHOT'
}


description = 'Message Format Library'


def antlrVersion = '[4.13.0,4.14)'
def antlrExtVersion = '[0.6,0.7)'
def packVersion = '[0.1.2,0.2)'


configurations {
  antlr4 {
    visible = false
  }

  api.setExtendsFrom([])

  configureEach {
    resolutionStrategy.cacheDynamicVersionsFor 15, 'minutes'
  }
}


dependencies {
  // main
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  compileOnly "org.projectlombok:lombok:${lombokVersion}"

  implementation("de.sayayi.lib:antlr4-runtime-ext:${antlrExtVersion}") {
    exclude group: 'org.jetbrains'
    exclude group: 'org.antlr'
  }
  implementation "org.antlr:antlr4-runtime:${antlrVersion}"

  implementation "de.sayayi.lib:pack:${packVersion}"

  // test
  testImplementation gradleTestKit()
  testImplementation 'org.springframework:spring-core:[5.0,6.0)'

  antlr4 "org.antlr:antlr4:${antlrVersion}"
}


def grammarOutputDirectory = layout.buildDirectory
    .dir('generated-src/antlr/main/de/sayayi/lib/message/internal/parser').get().asFile

generateGrammarSource {
  //noinspection GroovyAccessibility
  antlrClasspath = configurations.antlr4
  outputDirectory = grammarOutputDirectory

  arguments += [ '-package', 'de.sayayi.lib.message.internal.parser' ]
}


compileJava.dependsOn generateGrammarSource


sourcesJar {
  dependsOn generateGrammarSource

  exclude 'gen/*'
  exclude '**/*.interp'
}


jar {
  manifest {
    attributes['Implementation-Title'] = project.description
  }
}


javadoc {
  (options as StandardJavadocDocletOptions).with {
    linksOffline(
        "https://javadoc.io/doc/org.jetbrains/annotations/${resolveVersion('annotations')}/",
        "${rootDir}/gradle/javadocs/jetbrains-annotations")
    linksOffline(
        "https://javadoc.io/doc/org.antlr/antlr4-runtime/${resolveVersion('antlr4-runtime')}/",
        "${rootDir}/gradle/javadocs/antlr4-runtime")
    linksOffline(
        "https://javadoc.io/doc/de.sayayi.lib/antlr4-runtime-ext/${resolveVersion('antlr4-runtime-ext')}/",
        "${rootDir}/gradle/javadocs/antlr4-runtime-ext")
  }
}


publishing {
  publications {

    msgformat(MavenPublication) {
      from components.java

      pom {
        name = 'Java Message Format Library'
        description = 'Highly configurable message format library supporting message definition through annotations'
        url = 'https://github.com/jgremmen/message-format'
        inceptionYear = '2019'

        licenses {
          license {
            name = 'Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'jgremmen'
            name = 'Jeroen Gremmen'
            email = 'jeroen.gremmen@sayayi.de'
          }
        }

        scm {
          connection = 'scm:git:git://github.com/jgremmen/message-format.git'
          developerConnection = 'scm:git:git://github.com/jgremmen/message-format.git'
          url = 'https://github.com/jgremmen/message-format'
        }
      }
    }
  }
}


signing {
  sign publishing.publications.msgformat
}


clean {
  delete layout.projectDirectory.dir("src/main/antlr/gen")
  delete layout.projectDirectory.dir("src/main/gen")

  delete fileTree(layout.projectDirectory.dir('src')).matching {
    include 'main/antlr/*.tokens'
    include 'test/resources/*-SNAPSHOT.mfp'
  }
}


idea {
  module {
    resourceDirs += file('src/main/antlr')
  }
}


tasks.register('generate-compatibility-export', JavaExec) {
  group = 'verification'
  description = 'Export pre-defined set of messages for compatibility test'

  mainClass = 'de.sayayi.lib.message.internal.pack.PackCompatibilityTest'
  classpath = sourceSets.test.runtimeClasspath

  args "${projectDir}/src/test/resources/messages-${version}.mfp"
}
