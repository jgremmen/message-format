/*
 * Copyright 2020 Jeroen Gremmen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'antlr'
  id 'idea'
  id 'com.netflix.nebula.optional-base' version '9.0.0'
  id 'de.sayayi.plugin.gradle.libapi' version "1.0-SNAPSHOT"
}


description = 'Message Format Library'


def antlrVersion = "4.9.3"
def antlrExtVersion = "0.3.0"
def asmVersion = "9.4"
def ehcacheVersion = "3.10.8"
def javaxCacheApiVersion = "1.1.1"
def springContextVersion = "5.3.26"


dependencies {
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  compileOnly "org.projectlombok:lombok:${lombokVersion}"

  implementation("de.sayayi.lib:antlr4-runtime-ext:${antlrExtVersion}") {
    transitive = false
  }

  implementation "javax.cache:cache-api:${javaxCacheApiVersion}", optional
  implementation "org.ow2.asm:asm:${asmVersion}", optional
  implementation "org.springframework:spring-core:${springContextVersion}", optional

  testImplementation "org.ehcache:ehcache:${ehcacheVersion}"

  antlr "org.antlr:antlr4:${antlrVersion}"
}


configurations {
  testAnnotationProcessor.extendsFrom annotationProcessor
  testCompileOnly.extendsFrom compileOnly
}


generateGrammarSource {
  outputDirectory = file("${buildDir}/generated-src/antlr/main/de/sayayi/lib/message/parser")
  arguments += [ '-package', 'de.sayayi.lib.message.parser' ]
}


compileJava.dependsOn generateGrammarSource


sourcesJar {
  dependsOn generateGrammarSource

  exclude "**/*.tokens"
  exclude "**/*.g4"
}


jar {
  manifest {
    attributes['Implementation-Title'] = "${project.description}"
  }
}


javadoc {
  (options as StandardJavadocDocletOptions).with {
    linksOffline "https://javadoc.io/doc/org.antlr/antlr4-runtime/${antlrVersion}/",
        "${rootDir}/gradle/javadocs/antlr4-runtime"
    linksOffline "https://javadoc.io/doc/de.sayayi.lib/antlr4-runtime-ext/${antlrExtVersion}/",
        "${rootDir}/gradle/javadocs/antlr4-runtime-ext"
    linksOffline "https://javadoc.io/doc/org.springframework/spring-core/${springContextVersion}/",
        "${rootDir}/gradle/javadocs/spring-core"
  }

  exclude '**/parser/MessageLexer.java'
  exclude '**/parser/MessageParser*.java'
  exclude '**/pack/*.java'
  exclude '**/*Impl.java'
  exclude '**/FixedSizeCacheMap.java'
}


publishing {
  publications {

    msgformat(MavenPublication) {
      from components.java

      versionMapping {
        usage('java-runtime') {
          fromResolutionResult()
        }
      }

      pom {
        name = 'Java Message Format Library'
        description = 'Highly configurable message format library supporting message definition through annotations'
        url = 'https://github.com/jgremmen/message-format'
        inceptionYear = '2019'

        licenses {
          license {
            name = 'Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'jgremmen'
            name = 'Jeroen Gremmen'
            email = 'jeroen.gremmen@sayayi.de'
          }
        }

        scm {
          connection = 'scm:git:git://github.com/jgremmen/message-format.git'
          developerConnection = 'scm:git:git://github.com/jgremmen/message-format.git'
          url = 'https://github.com/jgremmen/message-format'
        }
      }
    }
  }
}


signing {
  sign publishing.publications.msgformat
}


clean.doLast {
  fileTree("${projectDir}/src/main").matching {
    include "antlr/*.tokens"
  }.files.forEach({ it.delete() })
  file("${projectDir}/src/main/gen").delete()
}


idea {
  module {
    resourceDirs += file("src/main/antlr")
  }
}
