/*
 * Copyright 2020 Jeroen Gremmen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'antlr'
  id 'idea'
  id 'nebula.optional-base' version '5.0.3'
}


description = 'Message Format Library'


configurations {
  compile {
    extendsFrom = extendsFrom.findAll { it != configurations.antlr }
  }
}


def antlrVersion = "4.9.3"
def antlrExtVersion = "0.3.0"
def ehcacheVersion = "3.10.2"
def javaxCacheApiVersion = "1.1.1"


dependencies {
  implementation("de.sayayi.lib:antlr4-runtime-ext:${antlrExtVersion}") {
    exclude group: 'org.antlr', module: 'antlr4'
  }

  implementation "javax.cache:cache-api:${javaxCacheApiVersion}", optional

  testImplementation "org.ehcache:ehcache:${ehcacheVersion}"

  antlr "org.antlr:antlr4:${antlrVersion}"
}


generateGrammarSource {
  outputDirectory = file("${buildDir}/generated-src/antlr/main/de/sayayi/lib/message/parser")
  arguments += [ '-package', 'de.sayayi.lib.message.parser' ]
}


compileJava.dependsOn generateGrammarSource


sourcesJar {
  dependsOn generateGrammarSource

  exclude "**/*.tokens"
  exclude "**/*.g4"
}


jar {
  manifest {
    attributes['Implementation-Title'] = "${project.description}"
  }
}


publishing {
  publications {

    msgformat(MavenPublication) {
      from components.java

      versionMapping {
        usage('java-runtime') {
          fromResolutionResult()
        }
      }

      pom {
        name = 'Java Message Format Library'
        description = 'Highly configurable message format library supporting message definition through annotations'
        url = 'https://github.com/jgremmen/message-format'
        inceptionYear = '2019'

        licenses {
          license {
            name = 'Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'jgremmen'
            name = 'Jeroen Gremmen'
            email = 'jeroen.gremmen@sayayi.de'
          }
        }

        scm {
          connection = 'scm:git:git://github.com/jgremmen/message-format.git'
          developerConnection = 'scm:git:git://github.com/jgremmen/message-format.git'
          url = 'https://github.com/jgremmen/message-format'
        }
      }
    }
  }
}


signing {
  sign publishing.publications.msgformat
}


clean.doLast {
  fileTree("${projectDir}/src/main").matching {
    include "antlr/*.tokens"
  }.files.forEach({ it.delete() })
  file("${projectDir}/src/main/gen").delete()
}


idea {
  module {
    resourceDirs += file("src/main/antlr")
  }
}