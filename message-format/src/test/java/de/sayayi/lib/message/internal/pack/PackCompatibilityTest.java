package de.sayayi.lib.message.internal.pack;

import de.sayayi.lib.message.MessageSupportFactory;
import de.sayayi.lib.message.adopter.PropertiesAdopter;
import de.sayayi.lib.message.formatter.DefaultFormatterService;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Path;
import java.util.Properties;
import java.util.stream.Stream;

import static de.sayayi.lib.message.MessageFactory.NO_CACHE_INSTANCE;
import static java.nio.charset.StandardCharsets.ISO_8859_1;
import static java.nio.file.Files.*;
import static org.junit.jupiter.api.Assertions.assertEquals;


/**
 * @author Jeroen Gremmen
 * @since 0.9.1
 */
@TestMethodOrder(MethodOrderer.DisplayName.class)
@DisplayName("Message pack backward compatibility")
class PackCompatibilityTest
{
  private static Stream<Arguments> versionParameters()
  {
    return Stream.of(
        Arguments.of("0.20.0", 1, 7, 0)
    );
  }


  @DisplayName("Import message packs")
  @ParameterizedTest(name = "Generated by version {0}")
  @MethodSource("versionParameters")
  void importMessagePack(String libraryVersion, int expectedVersion, int messageCount, int templateCount)
      throws IOException
  {
    var messagePackPath = Path.of("src/test/resources/messages-" + libraryVersion + ".mfp");
    var cms = MessageSupportFactory.create(new DefaultFormatterService(), NO_CACHE_INSTANCE);

    // mime type
    assertEquals("application/x-message-format-pack+gzip", probeContentType(messagePackPath));

    // pack version
    try(var stream = new PackInputStream(newInputStream(messagePackPath))) {
      assertEquals(expectedVersion, stream.getVersion());
    }

    // import messages/templates
    cms.importMessages(newInputStream(messagePackPath));

    var messageAccessor = cms.getMessageAccessor();

    assertEquals(messageCount, messageAccessor.getMessageCodes().size());
    assertEquals(templateCount, messageAccessor.getTemplateNames().size());
  }



  public static void main(String[] args) throws IOException
  {
    var cms = MessageSupportFactory.create(new DefaultFormatterService(), NO_CACHE_INSTANCE);
    var properties = new Properties();
    var adopter =  new PropertiesAdopter(cms);

    properties.load(
        new InputStreamReader(newInputStream(Path.of("src/test/resources/template.properties")), ISO_8859_1));
    adopter.adoptTemplates(properties);

    properties.clear();
    properties.load(
        new InputStreamReader(newInputStream(Path.of("src/test/resources/message.properties")), ISO_8859_1));
    adopter.adopt(properties);

    cms.exportMessages(newOutputStream(Path.of(args[0])));
  }
}
