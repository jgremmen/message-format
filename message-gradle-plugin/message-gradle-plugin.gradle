/*
 * Copyright 2023 Jeroen Gremmen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//file:noinspection DependencyNotationArgument
//file:noinspection GroovyAssignabilityCheck


plugins {
  id 'java-gradle-plugin'
  alias(libs.plugins.publish.gradle.plugin)
}


description = 'Message Format Gradle Plugin'


dependencies {
  api gradleApi()

  implementation project(':message-format-asm')

  compileOnly project(':message-format')
  compileOnly project(':message-format-annotations')

  compileOnly libs.asm
}


tasks.named('test', Test) {
  dependsOn ':message-format-annotations:jar'

  // is there a better way to do this?
  systemProperty 'MFA_JAR', project(':message-format-annotations').jar.archiveFile.asFile.get().absolutePath
}


javadoc {
  (options as StandardJavadocDocletOptions).with {
    group('Gradle Plugin', [ 'de.sayayi.plugin.gradle.message' ])

    linksOffline(
        "https://javadoc.io/doc/de.sayayi.lib/message-format/${rootProject.version}/",
        "${rootDir}/gradle/javadocs/message-format")
    linksOffline(
        "https://javadoc.io/doc/org.jetbrains/annotations/${resolveVersion('annotations')}/",
        "${rootDir}/gradle/javadocs/jetbrains-annotations")
    linksOffline(
        "https://docs.gradle.org/${gradle.gradleVersion}/javadoc/",
        "${rootDir}/gradle/javadocs/gradle")
  }
}


jar {
  archiveBaseName = 'message-format-gradle-plugin'
}


gradlePlugin {
  website = 'https://github.com/jgremmen/message-format'
  vcsUrl = 'https://github.com/jgremmen/message-format'

  plugins {
    messageFormat {
      id = 'de.sayayi.plugin.gradle.message'
      displayName = 'Message Format Gradle Plugin'
      description = 'Gradle Plugin to scan the class path, pre-compile and pack message and ' +
                    'template formats into a single file.'
      implementationClass = 'de.sayayi.plugin.gradle.message.MessageFormatPlugin'
      tags.set([ 'sayayi', 'message-format', 'scan', 'pre-compile' ])
    }
  }
}


publishing {
  publications {
    gradlePlugin(MavenPublication) {
      from components.java

      pom {
        name = 'Java Message Format Gradle Plugin'
        description = 'Gradle Plugin'
        inceptionYear = '2023'

        developers {
          developer {
            id = 'jgremmen'
            name = 'Jeroen Gremmen'
            email = 'jeroen.gremmen@sayayi.de'
          }
        }
      }
    }
  }
}


signing {
  sign publishing.publications.gradlePlugin
}


tasks.named('publishToProjectLocalRepository') {
  dependsOn 'publishMessageFormatPluginMarkerMavenPublicationToProjectLocalRepository'
}


tasks.named('zipMavenCentralPortalPublication') {
  dependsOn 'publishMessageFormatPluginMarkerMavenPublicationToProjectLocalRepository'
}


ext.releaseTask.configure {
  if (snapshot) {
    dependsOn ':message-gradle-plugin:publishGradlePluginPublicationToMavenCentralSnapshotRepository'
    dependsOn ':message-gradle-plugin:publishMessageFormatPluginMarkerMavenPublicationToMavenCentralSnapshotRepository'
  }
  else {
    dependsOn ':message-gradle-plugin:publishPlugins'
  }
}
