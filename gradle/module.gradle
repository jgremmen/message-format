/*
 * Copyright 2020 Jeroen Gremmen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "java-library"
apply plugin: "maven-publish"
apply plugin: "jacoco"
apply plugin: "signing"


dependencies {
  compileOnly "org.jetbrains:annotations-java5:${jetbrainsAnnotationsVersion}"

  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}


repositories {
  mavenCentral()
}


java {
  withJavadocJar()
  withSourcesJar()
}


test {
  useJUnitPlatform()
}


jar.dependsOn test


tasks.withType(Jar) {
  includeEmptyDirs = false
  preserveFileTimestamps = true
  reproducibleFileOrder = true

  manifest {
    attributes(
        "Implementation-Vendor": "Jeroen Gremmen",
        "Implementation-Vendor-Id": "de.sayayi",
        "Implementation-Title": project.name,
        "Implementation-Version": project.version,
        "Created-By": "${System.getProperty("java.version")}",
        "Built-Date": new Date().format('yyyy-MM-dd HH:mm:ss')
    )
  }

  from(rootDir) {
    include "LICENSE"
    into "META-INF"
    expand(copyright: new Date().format("yyyy"), version: project.version)
  }
}


tasks.withType(JavaCompile).configureEach {
  javaCompiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(8)
  }
}


tasks.withType(Test).configureEach {
  javaLauncher = javaToolchains.launcherFor {
    languageVersion = JavaLanguageVersion.of(8)
  }
}


afterEvaluate {
  javadoc {
    title "${project.description} ${version}"

    (options as StandardJavadocDocletOptions).with {
      linksOffline "https://javadoc.io/doc/org.jetbrains/annotations-java5/${jetbrainsAnnotationsVersion}/",
          "${rootDir}/gradle/javadocs/jetbrains-annotations"

      encoding 'UTF-8'

      group("Message Core", [
          "de.sayayi.lib.message",
          "de.sayayi.lib.message.adopter",
          "de.sayayi.lib.message.annotation",
          "de.sayayi.lib.message.exception",
          "de.sayayi.lib.message.internal*",
          "de.sayayi.lib.message.parameter*",
          "de.sayayi.lib.message.parser*"
      ])
      group("Message Formatters", [
          "de.sayayi.lib.message.formatter*"
      ])

      noQualifiers 'java.util', 'java.lang'
    }

    failOnError false
  }
}


compileJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}


compileTestJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}


jacocoTestReport {
  reports {
    xml {
      required = true
    }
    html {
      required = true
    }
  }
}


publishing {
  repositories {
    maven {
      name = "mavenTemp"
      url = "${rootProject.buildDir}/repository"
    }
    maven {
      name = "mavenCentral"
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
      credentials {
        username = rootProject.findProperty('mavenCentral.username')
        password = rootProject.findProperty('mavenCentral.password')
      }
    }
  }
}
