plugins {
  id 'antlr'
  id 'idea'
  id 'org.anarres.jarjar'
}


description = 'Message Format Core'


configurations {
  compile {
    extendsFrom = extendsFrom.findAll { it != configurations.antlr }
  }
}


sourceSets {
  main {
    java.srcDirs = [ "src/main/java", "src/main/generated" ]
  }
  test {
    java.srcDirs = [ "src/test/java", "src/test/generated" ]
  }
}


dependencies {
  implementation jarjar.repackage("jarjar-antlr") {
    from "org.antlr:antlr4-runtime:${antlrVersion}"
    destinationName "antlr-runtime-${antlrVersion}-repackaged.jar"

    classDelete "org.antlr.v4.runtime.tree.xpath.**"
    classDelete "org.antlr.v4.runtime.tree.pattern.**"

    classRename 'org.antlr.v4.runtime.**', 'de.sayayi.lib.message.antlr.@1'
  }

  antlr "org.antlr:antlr4:${antlrVersion}"
}


generateGrammarSource {
  outputDirectory = file("src/main/generated/de/sayayi/lib/message/parser")
  arguments += [ '-package', 'de.sayayi.lib.message.parser' ]

  exclude "**/MessageParserTest.g4"

  doLast {
    fileTree(dir: "src/main/generated", include: "**/*.java").each { f ->
      ant.replaceregexp(file: f,
                        match: "org\\.antlr\\.v4\\.runtime\\.(.*)",
                        replace: "de.sayayi.lib.message.antlr.\\1",
                        byline: true)
    }
  }
}


compileJava {
  sourceCompatibility = 1.6
  targetCompatibility = 1.6
}


compileJava.dependsOn generateGrammarSource


idea {
  module {
    resourceDirs += file("src/main/antlr")
  }
}


clean.doLast {
  file('src/main/antlr/gen').deleteDir()
  file('src/main/gen').deleteDir()
  file('src/main/generated').deleteDir()
}
